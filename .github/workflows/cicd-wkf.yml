# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.

name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: ${{ secrets.DEPLOYMENT_NAME }}
  REPOSITORY: ${{ secrets.REPOSITORY }}
  IMAGE: ${{ secrets.IMAGE }}
  MAIN_SERVICE_NAME: ${{ secrets.MAIN_SERVICE_NAME }}

jobs:
  setup-build-test-publish-deploy:
    name: Setup, Build, test, Publish, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - 
      name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - 
      id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ secrets.workload_identity_provider }}
        service_account: ${{ secrets.service_account }}

    - 
      name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

    # Get the GKE credentials so we can deploy to the cluster
    - 
      name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    - 
      name: Build
      run: |-
        docker-compose build

    # test the Docker image
    - 
      name: Test
      run: |-
        docker-compose run ${{ env.MAIN_SERVICE_NAME }} python3 -m pytest

    # Push the Docker image to Google Artifact Registry
    - 
      name: Publish
      run: |-
        docker-compose push

    # Set up kustomize
    - 
      name: Set up Kustomize
      run: |-
        curl "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" -o install_kustomize.sh
        bash install_kustomize.sh

    # Deploy the Docker image to the GKE cluster
    - 
      name: Deploy
      run: |-
        # replacing the image name in the k8s template
        kustomize edit set image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ github.sha }}
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
        kubectl get services -o wide
  
  rollback:
    name: check errors in app and rollback if needed
    runs-on: ubuntu-latest
    needs: setup-build-test-publish-deploy

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Configure Workload Identity Federation and generate an access token.
      - 
        id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.service_account }}

      - 
        name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      # Get the GKE credentials so we can deploy to the cluster
      - 
        name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Testing for errors in deployment logs(all pods) and rollouting if needed
      - 
        name: Check container logs
        run: |
          kubectl logs -l app=${{ env.DEPLOYMENT_NAME }} | grep -qEi 'fail|err|Error' && (echo "found errors, proceeding to rollout..." && kubectl rollout undo deployment/${{ env.DEPLOYMENT_NAME }} && exit 1) || echo "No errors found in logs."
